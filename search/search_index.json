{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Agritech-LIDAR Agritech-LIDAR is an open-source python package for retrieving, transforming, and visualizing point cloud data obtained through an aerial LiDAR survey. Using the package, you can select a region of interest, and download the related point cloud dataset with its metadata, perform transformation and visualization using the downloaded data. Installation How to install this package in your project Usage How to use this package and the functions in it","title":"Home"},{"location":"#agritech-lidar","text":"Agritech-LIDAR is an open-source python package for retrieving, transforming, and visualizing point cloud data obtained through an aerial LiDAR survey. Using the package, you can select a region of interest, and download the related point cloud dataset with its metadata, perform transformation and visualization using the downloaded data.","title":"Agritech-LIDAR"},{"location":"#installation","text":"How to install this package in your project","title":"Installation"},{"location":"#usage","text":"How to use this package and the functions in it","title":"Usage"},{"location":"installation/","text":"Installation You can install the package in two ways either: Clone the repo git clone https://github.com/nahomfix/Agritech-LIDAR.git Navigate to the folder cd Agritech-LIDAR Install the dependencies pip install -r requirements.txt Or run pip install Agritech-LIDAR","title":"Installation"},{"location":"installation/#installation","text":"You can install the package in two ways either: Clone the repo git clone https://github.com/nahomfix/Agritech-LIDAR.git Navigate to the folder cd Agritech-LIDAR Install the dependencies pip install -r requirements.txt Or run pip install Agritech-LIDAR","title":"Installation"},{"location":"usage/","text":"Usage Below are the functions defined in this package fetch_data def fetch_data(self) -> dict: Fetches las and geotif data from public aws entwine dataset. plot_dem_contours def plot_dem_contours(self) -> None: Plots DEM with its contours plot_2D def plot_2D(self) -> None: Plots side by side of DEM and histogram. plot_heatmap def plot_heatmap(self, year: str, data_dict: dict) -> None: Plots a heatmap view of a terrain Parameters year: str the year of the desired geopandas data data_dict: dict the dictionary mapping of the year to its geopandas data plot_3D def plot_3D(self, year: str, data_dict: dict) -> None: Plots a 3D view of a terrain Parameters year: str the year of the desired geopandas data data_dict: dict the dictionary mapping of the year to its geopandas data","title":"Usage"},{"location":"usage/#usage","text":"Below are the functions defined in this package","title":"Usage"},{"location":"usage/#fetch_data","text":"def fetch_data(self) -> dict: Fetches las and geotif data from public aws entwine dataset.","title":"fetch_data"},{"location":"usage/#plot_dem_contours","text":"def plot_dem_contours(self) -> None: Plots DEM with its contours","title":"plot_dem_contours"},{"location":"usage/#plot_2d","text":"def plot_2D(self) -> None: Plots side by side of DEM and histogram.","title":"plot_2D"},{"location":"usage/#plot_heatmap","text":"def plot_heatmap(self, year: str, data_dict: dict) -> None: Plots a heatmap view of a terrain","title":"plot_heatmap"},{"location":"usage/#parameters","text":"year: str the year of the desired geopandas data data_dict: dict the dictionary mapping of the year to its geopandas data","title":"Parameters"},{"location":"usage/#plot_3d","text":"def plot_3D(self, year: str, data_dict: dict) -> None: Plots a 3D view of a terrain","title":"plot_3D"},{"location":"usage/#parameters_1","text":"year: str the year of the desired geopandas data data_dict: dict the dictionary mapping of the year to its geopandas data","title":"Parameters"}]}